<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jiaxi&#39;s blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-09-25T06:33:28.189Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Jiaxi Zhu</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>leetcode # 200 Number of Islands</title>
    <link href="http://yoursite.com/2020/09/24/leetcode-200-Number-of-Islands/"/>
    <id>http://yoursite.com/2020/09/24/leetcode-200-Number-of-Islands/</id>
    <published>2020-09-25T06:33:19.000Z</published>
    <updated>2020-09-25T06:33:28.189Z</updated>
    
    <content type="html"><![CDATA[<p>Given a 2d grid map of ‘1’s (land) and ‘0’s (water), count the number of islands. An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.</p><p>Example 1:</p><p>Input: grid = [<br>  [“1”,”1”,”1”,”1”,”0”],<br>  [“1”,”1”,”0”,”1”,”0”],<br>  [“1”,”1”,”0”,”0”,”0”],<br>  [“0”,”0”,”0”,”0”,”0”]<br>]<br>Output: 1<br>Example 2:</p><p>Input: grid = [<br>  [“1”,”1”,”0”,”0”,”0”],<br>  [“1”,”1”,”0”,”0”,”0”],<br>  [“0”,”0”,”1”,”0”,”0”],<br>  [“0”,”0”,”0”,”1”,”1”]<br>]<br>Output: 3</p><p>Solution:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public int numIslands(char[][] grid) &#123;</span><br><span class="line">        if (grid &#x3D;&#x3D; null || grid.length &#x3D;&#x3D; 0 || grid[0].length &#x3D;&#x3D; 0) &#123;</span><br><span class="line">            return 0;</span><br><span class="line">        &#125;</span><br><span class="line">        int count &#x3D; 0;</span><br><span class="line">        for (int i &#x3D; 0; i &lt; grid.length; i++) &#123;</span><br><span class="line">            for (int j &#x3D; 0; j &lt; grid[0].length; j++) &#123;</span><br><span class="line">                if (grid[i][j] &#x3D;&#x3D; &#39;1&#39;) &#123;</span><br><span class="line">                    dfs(grid,i,j);</span><br><span class="line">                    count++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return count;</span><br><span class="line">    &#125;</span><br><span class="line">    private void dfs(char[][] grid, int i, int j) &#123;</span><br><span class="line">        if (i &lt; 0 || i &gt;&#x3D; grid.length || j &lt; 0 || j &gt;&#x3D; grid[0].length || grid[i][j] &#x3D;&#x3D; &#39;0&#39;) &#123;</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        grid[i][j] &#x3D; &#39;0&#39;;</span><br><span class="line">        dfs(grid,i - 1, j);</span><br><span class="line">        dfs(grid,i + 1, j);</span><br><span class="line">        dfs(grid,i, j - 1);</span><br><span class="line">        dfs(grid,i, j + 1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The time complexity is O(MN). rows and cols<br>The space compelxity is O(MN).</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Given a 2d grid map of ‘1’s (land) and ‘0’s (water), count the number of islands. An island is surrounded by water and is formed by conne
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>leetcode # 1 Two Sum</title>
    <link href="http://yoursite.com/2020/09/24/leetcode-1-Two-Sum/"/>
    <id>http://yoursite.com/2020/09/24/leetcode-1-Two-Sum/</id>
    <published>2020-09-25T06:32:50.000Z</published>
    <updated>2020-09-25T06:33:06.031Z</updated>
    
    <content type="html"><![CDATA[<p> Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.</p><p>You may assume that each input would have exactly one solution, and you may not use the same element twice.</p><p>You can return the answer in any order.</p><p>Example 1:</p><p>Input: nums = [2,7,11,15], target = 9<br>Output: [0,1]<br>Output: Because nums[0] + nums[1] == 9, we return [0, 1].<br>Example 2:</p><p>Input: nums = [3,2,4], target = 6<br>Output: [1,2]<br>Example 3:</p><p>Input: nums = [3,3], target = 6<br>Output: [0,1]</p><p>Constraints:</p><p>2 &lt;= nums.length &lt;= 105<br>-109 &lt;= nums[i] &lt;= 109<br>-109 &lt;= target &lt;= 109<br>Only one valid answer exists.</p><p>Soluion1:<br>two pointer<br>sort the array and use left right pointer</p><p>Solution2:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public int[] twoSum(int[] nums, int target) &#123;</span><br><span class="line">        if (nums &#x3D;&#x3D; null || nums.length &#x3D;&#x3D; 0) &#123;</span><br><span class="line">            return new int[]&#123;-1,-1&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        HashMap&lt;Integer,Integer&gt; map &#x3D; new HashMap&lt;&gt;();</span><br><span class="line">        for (int i &#x3D; 0; i &lt; nums.length; i++) &#123;</span><br><span class="line">            int temp &#x3D; target - nums[i];</span><br><span class="line">            if (map.containsKey(temp)) &#123;</span><br><span class="line">                return new int[]&#123;i,map.get(temp)&#125;;</span><br><span class="line">            &#125;</span><br><span class="line">            else &#123;</span><br><span class="line">                map.put(nums[i],i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return new int[]&#123;-1,-1&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The time complexity is O(n).<br>The sapce complexity is O(n).</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt; Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.&lt;/p&gt;
&lt;p&gt;You may
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>leetcode # 378 Kth Smallest Element in a Sorted Matrix</title>
    <link href="http://yoursite.com/2020/09/22/leetcode-378-Kth-Smallest-Element-in-a-Sorted-Matrix/"/>
    <id>http://yoursite.com/2020/09/22/leetcode-378-Kth-Smallest-Element-in-a-Sorted-Matrix/</id>
    <published>2020-09-23T05:35:36.000Z</published>
    <updated>2020-09-23T05:35:57.819Z</updated>
    
    <content type="html"><![CDATA[<p>Given a n x n matrix where each of the rows and columns are sorted in ascending order, find the kth smallest element in the matrix.</p><p>Note that it is the kth smallest element in the sorted order, not the kth distinct element.</p><p>Example:</p><p>matrix = [<br>   [ 1,  5,  9],<br>   [10, 11, 13],<br>   [12, 13, 15]<br>],<br>k = 8,</p><p>return 13.<br>Note:<br>You may assume k is always valid, 1 ≤ k ≤ n2.</p><p>Solution1:<br>priorityQueue + bfs</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    class Cell &#123;</span><br><span class="line">        int row;</span><br><span class="line">        int col;</span><br><span class="line">        int val;</span><br><span class="line">        Cell(int row, int col, int val) &#123;</span><br><span class="line">            this.row &#x3D; row;</span><br><span class="line">            this.col &#x3D; col;</span><br><span class="line">            this.val &#x3D; val;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    public int kthSmallest(int[][] matrix, int k) &#123;</span><br><span class="line">        int row &#x3D; matrix.length;</span><br><span class="line">        int col &#x3D; matrix[0].length;</span><br><span class="line">        PriorityQueue&lt;Cell&gt; minHeap &#x3D; new PriorityQueue&lt;Cell&gt;(k, new Comparator&lt;Cell&gt;() &#123;</span><br><span class="line">            public int compare(Cell c1, Cell c2) &#123;</span><br><span class="line">                if (c1.val &#x3D;&#x3D; c2. val) &#123;</span><br><span class="line">                    return 0;</span><br><span class="line">                &#125;</span><br><span class="line">                return c1.val &lt; c2.val ? -1 : 1;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        boolean[][] visited &#x3D; new boolean[row][col];</span><br><span class="line">        minHeap.offer(new Cell(0,0,matrix[0][0]));</span><br><span class="line">        visited[0][0] &#x3D; true;</span><br><span class="line">        </span><br><span class="line">        for (int i &#x3D; 0; i &lt; k - 1; i++) &#123;</span><br><span class="line">            Cell cur &#x3D; minHeap.poll();</span><br><span class="line">            if (cur.row + 1 &lt; row &amp;&amp; !visited[cur.row + 1][cur.col]) &#123;</span><br><span class="line">                minHeap.offer(new Cell(cur.row + 1, cur.col, matrix[cur.row + 1][cur.col]));</span><br><span class="line">                visited[cur.row + 1][cur.col] &#x3D; true;</span><br><span class="line">            &#125;</span><br><span class="line">            if (cur.col + 1 &lt; col &amp;&amp; !visited[cur.row][cur.col + 1]) &#123;</span><br><span class="line">                minHeap.offer(new Cell(cur.row, cur.col + 1, matrix[cur.row][cur.col + 1]));</span><br><span class="line">                visited[cur.row][cur.col + 1] &#x3D; true;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return minHeap.peek().val;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The time complexity is O(klogk)<br>The space complexity is O(k + n^2)</p><p>Solution2:<br>binarysearch</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public int kthSmallest(int[][] matrix, int k) &#123;</span><br><span class="line">        int m &#x3D; matrix.length;</span><br><span class="line">        int n &#x3D; matrix[0].length;</span><br><span class="line">        int left &#x3D; matrix[0][0];</span><br><span class="line">        int right &#x3D; matrix[m - 1][n - 1];</span><br><span class="line">        </span><br><span class="line">        while (left &lt;&#x3D; right) &#123;</span><br><span class="line">            int mid &#x3D; left + (right - left) &#x2F; 2;</span><br><span class="line">            int count &#x3D; lessAndEqual(matrix,mid);</span><br><span class="line">            if (count &lt; k) &#123;</span><br><span class="line">                left &#x3D; mid + 1;</span><br><span class="line">            &#125;</span><br><span class="line">            else &#123;</span><br><span class="line">                right &#x3D; mid - 1;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return left;</span><br><span class="line">    &#125;</span><br><span class="line">    private int lessAndEqual(int[][] matrix, int target) &#123;</span><br><span class="line">        int i &#x3D; matrix.length - 1;</span><br><span class="line">        int j &#x3D; 0;</span><br><span class="line">        int count &#x3D; 0;</span><br><span class="line">        while (i &gt;&#x3D; 0 &amp;&amp; j &lt; matrix.length) &#123;</span><br><span class="line">            if (matrix[i][j] &lt;&#x3D; target) &#123;</span><br><span class="line">                count +&#x3D; i + 1;</span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line">            else &#123;</span><br><span class="line">                i--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The time complexity is O(Nlog(Max- MIN)).<br>The space complexity is O(1).</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Given a n x n matrix where each of the rows and columns are sorted in ascending order, find the kth smallest element in the matrix.&lt;/p&gt;
&lt;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>leetcode # 380  Insert Delete GetRandom O(1)</title>
    <link href="http://yoursite.com/2020/09/22/leetcode-380-Insert-Delete-GetRandom-O-1/"/>
    <id>http://yoursite.com/2020/09/22/leetcode-380-Insert-Delete-GetRandom-O-1/</id>
    <published>2020-09-23T05:34:40.000Z</published>
    <updated>2020-09-23T05:35:10.043Z</updated>
    
    <content type="html"><![CDATA[<p>Implement the RandomizedSet class:</p><p>bool insert(int val) Inserts an item val into the set if not present. Returns true if the item was not present, false otherwise.<br>bool remove(int val) Removes an item val from the set if present. Returns true if the item was present, false otherwise.<br>int getRandom() Returns a random element from the current set of elements (it’s guaranteed that at least one element exists when this method is called). Each element must have the same probability of being returned.<br>Follow up: Could you implement the functions of the class with each function works in average O(1) time?</p><p>Example 1:</p><p>Input<br>[“RandomizedSet”, “insert”, “remove”, “insert”, “getRandom”, “remove”, “insert”, “getRandom”]<br>[[], [1], [2], [2], [], [1], [2], []]<br>Output<br>[null, true, false, true, 2, true, false, 2]</p><p>Explanation<br>RandomizedSet randomizedSet = new RandomizedSet();<br>randomizedSet.insert(1); // Inserts 1 to the set. Returns true as 1 was inserted successfully.<br>randomizedSet.remove(2); // Returns false as 2 does not exist in the set.<br>randomizedSet.insert(2); // Inserts 2 to the set, returns true. Set now contains [1,2].<br>randomizedSet.getRandom(); // getRandom() should return either 1 or 2 randomly.<br>randomizedSet.remove(1); // Removes 1 from the set, returns true. Set now contains [2].<br>randomizedSet.insert(2); // 2 was already in the set, so return false.<br>randomizedSet.getRandom(); // Since 2 is the only number in the set, getRandom() will always return 2.</p><p>Constraints:</p><p>-231 &lt;= val &lt;= 231 - 1<br>At most 105 calls will be made to insert, remove, and getRandom.<br>There will be at least one element in the data structure when getRandom is called.</p><p>Solution:<br>using hashmap and arraylist<br>hashmap can make remove and insert in o(1).<br>it can random access in arraylist in O(1).</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">class RandomizedSet &#123;</span><br><span class="line">    HashMap&lt;Integer,Integer&gt; map;</span><br><span class="line">    ArrayList&lt;Integer&gt; list;</span><br><span class="line">    &#x2F;** Initialize your data structure here. *&#x2F;</span><br><span class="line">    public RandomizedSet() &#123;</span><br><span class="line">        map &#x3D; new HashMap&lt;Integer,Integer&gt;();</span><br><span class="line">        list &#x3D; new ArrayList&lt;Integer&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    &#x2F;** Inserts a value to the set. Returns true if the set did not already contain the specified element. *&#x2F;</span><br><span class="line">    public boolean insert(int val) &#123;</span><br><span class="line">        if (map.containsKey(val)) &#123;</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">        else &#123;</span><br><span class="line">            map.put(val,list.size());</span><br><span class="line">            list.add(val);</span><br><span class="line">            return true;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    &#x2F;** Removes a value from the set. Returns true if the set contained the specified element. *&#x2F;</span><br><span class="line">    public boolean remove(int val) &#123;</span><br><span class="line">        if (!map.containsKey(val)) &#123;</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">        else &#123;</span><br><span class="line">            int key &#x3D; map.get(val);</span><br><span class="line">            int lastElement &#x3D; list.get(list.size() - 1);</span><br><span class="line">            map.put(lastElement,key);</span><br><span class="line">            list.set(key,lastElement);</span><br><span class="line">            map.remove(val);</span><br><span class="line">            list.remove(list.size() - 1);</span><br><span class="line">            return true;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    &#x2F;** Get a random element from the set. *&#x2F;</span><br><span class="line">    public int getRandom() &#123;</span><br><span class="line">        Random random &#x3D; new Random();</span><br><span class="line">        return list.get(random.nextInt(list.size()));</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Implement the RandomizedSet class:&lt;/p&gt;
&lt;p&gt;bool insert(int val) Inserts an item val into the set if not present. Returns true if the item 
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2020/05/28/hello-world/"/>
    <id>http://yoursite.com/2020/05/28/hello-world/</id>
    <published>2020-05-29T02:53:21.111Z</published>
    <updated>2020-05-29T02:53:21.111Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
